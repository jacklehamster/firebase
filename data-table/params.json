{"name":"Columns","tagline":"Search, sort, and paginate your JSON data","body":"## Columns\r\n#### by Michael Eisenbraun\r\n\r\nColumns is an easy way of creating JSON data into HTML tables that are sortable, searchable, and paginating. All you need is to provide the data, and Columns will do the rest.\r\n\r\n### Installation\r\n\r\nInclude the jQuery Library 1.7 or later and Columns Plugin File: \r\n\r\n```\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js\"></script>\r\n<script src=\"js/jquery.columns-2.0.min.js\"></script>\r\n```\r\n\r\nInclude a pre-built Columns theme or create your own\r\n\r\n```\r\n<link rel=\"stylesheet\" href=\"css/classic.css\">\r\n```\r\n\r\nBecause Columns create all the necessary HTML dynamically, the only HTML needed is a empty HTML element, such as a `<div>` tag, with the corresponding id as using in the initialization.\r\n\r\n```\r\n<div id=\"columns\"></div>\r\n```\r\n\r\nFinally, initialize Columns. \r\n\r\n```\r\n<script>\r\n  $(document).ready(function() {\r\n    var json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}]; \r\n    $('#columns').columns({data:json});\r\n  });\r\n</script>\r\n```\r\n\r\n<br>\r\n\r\n### Options\r\n\r\nThe changing how Columns builds the table is created can be manipulated by passing a object as a parameter during invocation.\r\n\r\nThere is only one required object attribute, the data attribute, which must be an array of objects (see example above). All other attributes are optional.\r\n\r\n**data** _(Object)_\r\n\r\nREQUIRED. This is the data that columns uses to build the table.\r\n\r\n```\r\n var json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n $('#columns').columns({ \r\n   data: json\r\n });\r\n```\r\n***\r\n\r\n**evenRowClass** _(String)_\r\n\r\nThis class is added to all the even rows within the tbody.\r\n\r\nDefault: `'ui-table-rows-even'`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#columns').columns({ \r\n  data: json, \r\n  evenRowClass: 'even-rows'\r\n});\r\n```\r\n\r\n***\r\n\r\n**oddRowClass** _(String)_\r\n\r\nThis class is added to all the odd rows within the tbody.\r\n\r\nDefault: `'ui-table-rows-even'`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#columns').columns({ \r\n  data: json, \r\n  evenRowClass: 'odd-rows'\r\n});\r\n```\r\n\r\n***\r\n\r\n**liveSearch** _(Boolean)_\r\n\r\nIf true, results will be filter on keyup. If false, search will not initiate until the \"enter\" is pressed.\r\n\r\nDefault: `true`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#paginate').paginate({ \r\n  data: json,\r\n  liveSearch: false\r\n});\r\n```\r\n\r\n***\r\n\r\n**page** _(Number)_\r\n\r\nThe page to be displayed\r\n\r\nDefault: `1`\r\n\r\n***\r\n\r\n**plugins** _(Array)_\r\n\r\nColumns will attempt to call the list of plugins. See Plugins for more information.\r\n\r\nDefault: `null`\r\n\r\n***\r\n\r\n**query** _(String)_\r\n\r\nIf set, will filter data to only to those rows with values that match query.\r\n\r\nDefault: `null`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  query:'row2'\r\n});\r\n```\r\n\r\n***\r\n\r\n**reverse** _(Boolean)_\r\n\r\nIf true, sort data in reverse order; sortBy must be set.\r\n\r\nDefault: `false`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  sortBy: 'col2',\r\n  reverse: true\r\n});\r\n```\r\n\r\n***\r\n\r\n**schema** _(Array of Objects)_\r\n\r\nIf set, formats the table to the schema's design. \r\nEach schema object requires two attributes: header (the title of column) and key (the corresponding data attribute key). For additional options, see Schema below.\r\n\r\nDefault: `null`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  schema:[\r\n      { \"header\":\"Column 1\",\"key\":\"col1\"},\r\n      { \"header\":\"Column 2\",\"key\":\"col2\"}\r\n  ]\r\n});\r\n```\r\n\r\n***\r\n\r\n**searchableFields** _(Array of JSON keys)_\r\n\r\nIf set, the listed keys and there associated values will be searched. If null, all data is searchable.\r\n\r\nDefault: `null`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#paginate').paginate({ \r\n  data: json,\r\n  searchableFields: ['col1'],\r\n  schema:[\r\n    { \"header\":\"Column 1\",\"key\":\"col1\"},\r\n    { \"header\":\"Column 2\",\"key\":\"col2\"}\r\n  ]\r\n});\r\n```\r\n\r\n***\r\n\r\n**showRows** _(Array of Numbers)_\r\n\r\nIf set, displays a select box with each number as an option.\r\n\r\nDefault: `[5, 10, 25, 50]`\r\n\r\n***\r\n\r\n**size** _(Number)_\r\n\r\nThe number of rows to display per page.\r\n\r\nDefault: `10`\r\n\r\n***\r\n\r\n**sortableFields** _(Array of JSON keys)_\r\n\r\nIf set, the columns associated with the listed keys will be sortable. If null, all columns will be sortable.\r\n\r\nDefault: `null`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#paginate').paginate({ \r\n  data: json,\r\n  sortableFields: ['col1'],\r\n  schema:[\r\n    { \"header\":\"Column 1\",\"key\":\"col1\"},\r\n    { \"header\":\"Column 2\",\"key\":\"col2\"}\r\n  ]\r\n});\r\n```\r\n\r\n***\r\n\r\n**sortBy** _(String)_\r\n\r\nIf set, sort data by at that attribute key\r\n\r\nDefault: `null`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  sortBy: 'col2'\r\n});\r\n```\r\n\r\n***\r\n\r\n**templateFile** _(String)_\r\n\r\nThe path to an external Mustache Template. If null, default template will be used.\r\n\r\nDefault: `null`\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  template: 'template/custom.mst'\r\n});\r\n```\r\n<br>\r\n\r\n### Schema\r\n\r\nSchema is a blueprint for columns to build the table. With schema you can set column order and column header or even remove columns all together from the original data. Schema allows for templates to be create for row data, and conditional statements can be added to show only desired data.\r\n\r\nSchema is an Array of Objects. Each object serves as a table column, and must contain a header and key attribute. The order in which the object are place in the array is the order that they will appear in the table. See below for additional information about the different options that can be applied to each schema object.\r\n\r\n**condition** _(Function)_\r\n\r\nThis is a condition that each column data must meet to be displayed. The function must return a `Boolean`.\r\n\r\n```\r\nvar json = [{\"col1\":\"1\", \"col2\":\"one\"}, {\"col1\":\"2\", \"col2\":\"two\"}, {\"col1\":\"3\", \"col2\":\"three\"}];`\r\n$('#columns').columns({ \r\n  data: json,\r\n  schema:[\r\n      {\"header\":\"Numbers\",\"key\":\"col1\", \"condition\":function(val) { return (val%2 != 0); /*only show odd numbers */ } },\r\n      {\"header\":\"Words\",\"key\":\"col2\"}\r\n  ]\r\n});\r\n```\r\n\r\n***\r\n\r\n**header** _(String)_\r\n\r\nREQUIRED. The title for the column header.\r\n\r\n```\r\nvar json = [{\"col1\":\"1\", \"col2\":\"one\"}, {\"col1\":\"2\", \"col2\":\"two\"}, {\"col1\":\"3\", \"col2\":\"three\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  schema:[\r\n      {\"header\":\"Numbers\",\"key\":\"col1\"},\r\n      {\"header\":\"Words\",\"key\":\"col2\"}\r\n  ]\r\n});\r\n```\r\n\r\n***\r\n\r\n**key** _(String)_\r\n\r\nREQUIRED. The corresponding data attribute key for this columns data.\r\n\r\n```\r\nvar json = [{\"col1\":\"1\", \"col2\":\"one\"}, {\"col1\":\"2\", \"col2\":\"two\"}, {\"col1\":\"3\", \"col2\":\"three\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  schema:[\r\n      {\"header\":\"Numbers\",\"key\":\"col1\"},\r\n      {\"header\":\"Words\",\"key\":\"col2\"}\r\n  ]\r\n});\r\n```\r\n\r\n***\r\n\r\n**template** _(String)_\r\n\r\nThe template allow for a row data to be customized to include additional HTML and content. Data values be added to the template by including the data attribute key between double curly brackets `({{col1}})`.\r\n\r\n```\r\nvar json = [{\"col1\":\"1\", \"col2\":\"one\"}, {\"col1\":\"2\", \"col2\":\"two\"}, {\"col1\":\"3\", \"col2\":\"three\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  schema:[\r\n      {\"header\":\"Numbers\",\"key\":\"col1\", \"template\":\"This is row <strong>{{col1}}</strong>.\" },\r\n      {\"header\":\"Words\",\"key\":\"col2\"}\r\n  ]\r\n});\r\n```\r\n\r\n<br>\r\n\r\n### API\r\n\r\n**getObject** \r\n\r\nThis method returns Columns' object\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getObject');\r\n```\r\n\r\nTo call internally from a plugin use `this`.\r\n\r\n***\r\n\r\n**getPage**\r\n\r\nThis method returns the table's current page.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getPage');\r\n```\r\n\r\nTo call internally from a plugin use `this.page`.\r\n\r\n***\r\n\r\n**getQuery**\r\n\r\nThis method returns the current search query.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getQuery');\r\n```\r\n\r\nTo call internally from a plugin use `this.query`.\r\n\r\n***\r\n\r\n**getRange**\r\n\r\nThis method returns the table's current page range. Range is returned as an object.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getRange');\r\n```\r\n\r\nTo call internally from a plugin use `this.range`.\r\n\r\n***\r\n\r\n**getRows**\r\n\r\nThis method returns the table's current page rows. Rows are returned as an array.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getRows');\r\n```\r\nTo call internally from a plugin use `this.rows`.\r\n\r\n***\r\n\r\n**getTemplate**\r\n\r\nThis method returns the Column's Mustache template.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getTemplate');\r\n```\r\n\r\nTo call internally from a plugin use `this.template`.\r\n\r\n***\r\n\r\n**getThead**\r\n\r\nThis method returns the table's thead. Thead is returned as an array.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getThead');\r\n```\r\n\r\nTo call internally from a plugin use `this.thead`.\r\n\r\n***\r\n\r\n**getTotal**\r\nThis method returns an interger of the table's current total. Note: This is total after filters and conditions have been applied.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getTotal');\r\n```\r\n\r\nTo call internally from a plugin use `this.total`.\r\n\r\n***\r\n\r\n**getView**\r\n\r\nThis method returns the view object that was used to render the Mustache template.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('getView');\r\n```\r\nTo call internally from a plugin use `this.view`.\r\n\r\n***\r\n\r\n**gotoPage(int)**\r\n\r\nThis method takes an intiger and if the page exists, changes the table's current page. Note: false is returned if page doesn't exist.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('gotoPage', 3);\r\n```\r\nTo call internally from a plugin use `this.gotoPage(3)`.\r\n\r\n***\r\n\r\n**pageExists(int)**\r\n\r\nThis method takes an intiger and checks if the page exists in the current table. Returns boolean. Note: Pages start with 1.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('pageExists', 3);\r\n```\r\nTo call internally from a plugin use `this.pageExists(3)`.\r\n\r\n***\r\n\r\n**resetData**\r\n\r\nThis method resets data to it original state and returns the result.\r\n\r\nExternal call:\r\n```\r\nvar columns_object = $('#columns').columns('resetData');\r\n```\r\nTo call internally from a plugin use `this.resetDate()`.\r\n\r\n***\r\n\r\n<br>\r\n\r\n### Creating plugins\r\nColumns is extensible through the use of plugins and Columns API.\r\n\r\nThe basic plugin structure should look like this. All plugins must include a init method\r\n```\r\nif (typeof ColumnsPlugins === 'undefined') var ColumnsPlugins = {};\r\n  ColumnsPlugins.your_plugin = {\r\n      init: function() {\r\n \r\n      }\r\n  }\r\n```\r\n\r\nPlugins can be added to Columns by using the plugins option\r\n\r\n```\r\nvar json = [{\"col1\":\"row1\", \"col2\":\"row1\", \"col3\":\"row1\"}, {\"col1\":\"row2\", \"col2\":\"row2\", \"col3\":\"row2\"}];\r\n$('#columns').columns({ \r\n  data: json,\r\n  plugins: ['gotopage']\r\n});\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}